'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Worker = function () {
	function Worker(executor, mode) {
		_classCallCheck(this, Worker);

		this.mode = mode || Worker.MODE_SYNC;
		this.executor = executor;
		this._tasks = [];
		this.state = Worker.STATE_IDLE_NO_TASKS;
		this.failures = [];
	}

	_createClass(Worker, [{
		key: 'addTask',
		value: function addTask(task, start) {
			this._tasks.push(task);
			if (this.state < Worker.STATE_IDLE_WITH_TASKS) {
				this.state = Worker.STATE_IDLE_WITH_TASKS;
			}
			if (start) {
				this.start();
			}
			return this;
		}
	}, {
		key: 'andStart',
		value: function andStart() {
			return this.start();
		}
	}, {
		key: 'start',
		value: function start() {
			if (!this.tasks) {
				return this;
			}
			this.work();
			return this;
		}
	}, {
		key: 'nextTask',
		value: function nextTask() {
			return this.tasks ? this._tasks.shift() : null;
		}
	}, {
		key: 'addFailure',
		value: function addFailure(task, err) {
			if (typeof err === 'string') {
				err = new Error(err);
			}
			this.failures.push({
				err: err, task: task
			});
		}
	}, {
		key: 'work',
		value: function work() {
			var _this = this;

			this.state = Worker.STATE_WORKING;
			var task = this.nextTask();
			try {
				this.executor(task); // currently only operating in sync mode.
			} catch (err) {
				this.addFailure(ask, err);
			}
			if (!this._tasks.length) {
				this.state = Worker.STATE_IDLE_NO_TASKS;
			} else {
				if (typeof process !== 'undefined') {
					process.nextTick(function () {
						return _this.work();
					});
				} else {
					setTimeout(function () {
						return _this.work();
					}, 0);
				}
			}
		}
	}, {
		key: 'destroy',
		value: function destroy() {
			while (this.tasks) {
				this.addFailure(this.nextTask(), "worker destroyed with unfinished task");
			}
		}
	}, {
		key: 'state',
		get: function get() {
			return this._state;
		},
		set: function set(s) {
			this._state = s;
		}
	}, {
		key: 'tasks',
		get: function get() {
			return this._tasks.length;
		}
	}]);

	return Worker;
}();

exports.default = Worker;


Worker.STATE_NEW = 1;
Worker.STATE_IDLE_NO_TASKS = 2;
Worker.STATE_IDLE_WITH_TASKS = 3;
Worker.STATE_WORKING = 4;

Worker.MODE_SYNC = 'MODE_SYNC';
Worker.MODE_CALLBACK = 'MODE_CALLBACK';
Worker.MODE_PROMISE = 'MODE_PROMISE';