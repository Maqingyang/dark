'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StateDef = function () {
	function StateDef(name, rank, description, ctx) {
		_classCallCheck(this, StateDef);

		this.name = name;
		this.rank = rank;
		this.description = description || name;
		this.context = ctx;
	}

	_createClass(StateDef, [{
		key: 'context',
		set: function set(value) {
			this._ctx = value;
		}
	}, {
		key: 'name',
		get: function get() {
			return this._name;
		},
		set: function set(n) {
			if (this._name) {
				throw new Error("StateDef cannot be renamed");
			}
			if (!(typeof n === 'string' && n)) {
				throw new Error('bad name');
			}

			if (!/^[\w_-]+$/.test(n)) {
				throw new Error('bad name (' + n + ')');
			}

			this._name = n;
		}

		/**
   * rank is an optional concept of how close to the mcpDone
   * your subject is.
   * There's no defined scale/range.
   * @param r {Number)
   */

	}, {
		key: 'rank',
		set: function set(r) {
			this._rank = parseInt(r) || 0;
		},
		get: function get() {
			return this._rank;
		}
	}]);

	return StateDef;
}();

exports.default = StateDef;