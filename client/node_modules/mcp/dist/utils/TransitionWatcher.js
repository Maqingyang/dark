'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function stateMatch(stateTest, state) {
	if (!stateTest) {
		return true;
	}
	if (stateTest) {
		if (Array.isArray(stateTest)) {
			if (stateTest.length) {
				if (!stateTest.includes(state)) {
					return false;
				}
			}
		} else if (typeof stateTest === 'string') {
			if (!(stateTest === state)) {
				return false;
			}
		}
	}
	return true;
}

var MCPTransitionWatcher = function () {

	/**
  *
  * @param mcp {MCP}
  * @param response
  * @param conditions
  */

	function MCPTransitionWatcher(mcp, response, conditions) {
		_classCallCheck(this, MCPTransitionWatcher);

		this.mcp = mcp;
		this.response = response;
		this.filtered = false;
		this.removed = false;

		if (conditions) {
			if (typeof conditions === 'string') {

				this.filter.set('toState', conditions);
				this.filtered = true;
			} else {
				if (conditions.hasOwnProperty('action') && conditions.action) {
					this.filter.set('action', conditions.action);
					this.filtered = true;
				}
				if (conditions.hasOwnProperty('fromState') && conditions.fromState) {
					this.filter.set('fromState', conditions.fromState);
					this.filtered = true;
				}
				if (conditions.hasOwnProperty('toState') && conditions.toState) {
					this.filter.set('toState', conditions.toState);
					this.filtered = true;
				}
			}
		}
	}

	_createClass(MCPTransitionWatcher, [{
		key: 'destroy',
		value: function destroy() {
			this.mcp.mcpUnwatch(this);
			this.removed = true;
		}
	}, {
		key: 'has',
		value: function has(prop) {
			if (!this._filter) {
				return false;
			}
			return this.filter.has(prop);
		}

		/**
   *
   * @param te {MCPTransitionEvent}
   */

	}, {
		key: 'caresAbout',
		value: function caresAbout(te) {
			if (!this.filtered) {
				return true;
			}
			if (this.has('action') && !(this.filter.get('action') === te.action)) {
				return false;
			}

			if (this.has('fromState')) {
				if (!stateMatch(this.filter.get('fromState'), te.fromState)) {
					return false;
				}

				if (te.fromState === te.toState) {
					// since we care about state -- and the state is not actually CHANGING.....
					return false;
				}
			}

			if (this.has('toState')) {
				if (!stateMatch(this.filter.get('toState'), te.toState)) {
					return false;
				}

				if (te.fromState === te.toState) {
					// since we care about state -- and the state is not actually CHANGING.....
					return false;
				}
			}

			return true;
		}
	}, {
		key: 'reactTo',
		value: function reactTo(te) {
			if (this.caresAbout(te)) {
				this.response(te);
			}
		}
	}, {
		key: 'toString',
		value: function toString() {
			var so = {};

			so.response = this.response.toString();
			if (this._filter) {
				this.filter.forEach(function (value, key) {
					return so[key] = value;
				});
			}

			return JSON.stringify(so);
		}
	}, {
		key: 'filter',
		get: function get() {
			if (!this._filter) {
				this._filter = new Map();
			}
			return this._filter;
		}
	}]);

	return MCPTransitionWatcher;
}();

exports.default = MCPTransitionWatcher;