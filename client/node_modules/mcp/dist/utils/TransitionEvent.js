"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * a record of a mid-transition condition that
 * exists when leaving one state for another
 * due to an action.
 */

var MCPTransitionEvent = function () {

	/**
  *
  * @param handler {Object}
  * @param action {String}
  * @param mcp {MCP}
  */

	function MCPTransitionEvent(handler, action, mcp) {
		_classCallCheck(this, MCPTransitionEvent);

		this._action = action;
		this._fromState = mcp.mcpState;
		this._toState = handler.toState;
		this.handler = handler;
		this.target = mcp;
	}

	/**
  *
  * @returns {String}
  */


	_createClass(MCPTransitionEvent, [{
		key: "action",
		get: function get() {
			return this._action;
		}

		/**
   *
   * @returns {String}
   */

	}, {
		key: "fromState",
		get: function get() {
			return this._fromState;
		}

		/**
   *
   * @returns {String}
   */

	}, {
		key: "toState",
		get: function get() {
			return this._toState;
		}
	}]);

	return MCPTransitionEvent;
}();

exports.default = MCPTransitionEvent;