"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * the record of a routing solution for when an action is triggered.
 * note -- the action is a memo for which action created the handler
 * but in truth it has no effect on flow.
 */

var MCPHandler = function () {
    /**
     *
     * @param fromStates [{State}]
     * @param toState {String}
     * @param action {String}
     */

    function MCPHandler(fromStates, toState, action) {
        _classCallCheck(this, MCPHandler);

        this._fromStates = fromStates;
        this._toState = toState;
        this.action = action;
    }

    _createClass(MCPHandler, [{
        key: "empty",
        value: function empty() {
            return !(this._fromStates && this._fromStates.length);
        }
    }, {
        key: "handles",
        value: function handles(pState) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this._fromStates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var state = _step.value;

                    if (pState === state) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return false;
        }

        /**
         *
         * @returns [{String}]
         */

    }, {
        key: "fromStates",
        get: function get() {
            return this._fromStates;
        }

        /**
         * @returns {String}
         */

    }, {
        key: "toState",
        get: function get() {
            return this._toState;
        }
    }]);

    return MCPHandler;
}();

exports.default = MCPHandler;