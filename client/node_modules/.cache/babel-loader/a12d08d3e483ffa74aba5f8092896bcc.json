{"ast":null,"code":"var _classCallCheck = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar utils = require('../utils/index');\n\nvar EthersAbi = require('./utils/abi-coder').AbiCoder;\n\nvar AbiCoder = require('./utils/abi-coder').AbiCoder;\n\nvar ethersAbiCoder = new EthersAbi(function (type, value) {\n  if (type.match(/^u?int/) && !(utils.judge(value) === 'array') && (!(utils.judge(value) === 'object') || value.constructor.name !== 'BN')) {\n    return value.toString();\n  }\n\n  return value;\n}); // result method\n\nfunction Result() {}\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\n\n\nvar ABICoder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ABICoder() {\n    _classCallCheck(this, ABICoder);\n  }\n\n  _createClass(ABICoder, [{\n    key: \"encodeFunctionSignature\",\n\n    /**\n     * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n     *\n     * @method encodeFunctionSignature\n     * @param {String|Object} functionName\n     * @return {String} encoded function name\n     */\n    value: function encodeFunctionSignature(functionName) {\n      if (utils.judge(functionName) === 'object') {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n      }\n\n      return utils.sha3(functionName).slice(0, 10);\n    }\n    /**\n     * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n     *\n     * @method encodeEventSignature\n     * @param {String|Object} functionName\n     * @return {String} encoded function name\n     */\n\n  }, {\n    key: \"encodeEventSignature\",\n    value: function encodeEventSignature(functionName) {\n      if (utils.judge(functionName) === 'object') {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n      }\n\n      return utils.sha3(functionName);\n    }\n    /**\n     * Should be used to encode plain param\n     *\n     * @method encodeParameter\n     * @param {String} type\n     * @param {Object} param\n     * @return {String} encoded plain param\n     */\n\n  }, {\n    key: \"encodeParameter\",\n    value: function encodeParameter(type, param) {\n      return this.encodeParameters([type], [param]);\n    }\n    /**\n     * Should be used to encode list of params\n     *\n     * @method encodeParameters\n     * @param {Array} types\n     * @param {Array} params\n     * @return {String} encoded list of params\n     */\n\n  }, {\n    key: \"encodeParameters\",\n    value: function encodeParameters(types, params) {\n      return ethersAbiCoder.encode(this.mapTypes(types), params);\n    }\n    /**\n     * Map types if simplified format is used\n     *\n     * @method mapTypes\n     * @param {Array} types\n     * @return {Array}\n     */\n\n  }, {\n    key: \"mapTypes\",\n    value: function mapTypes(types) {\n      var self = this;\n      var mappedTypes = [];\n      types.forEach(function (type) {\n        if (self.isSimplifiedStructFormat(type)) {\n          var structName = Object.keys(type)[0];\n          mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n            components: self.mapStructToCoderFormat(type[structName])\n          }));\n          return;\n        }\n\n        mappedTypes.push(type);\n      });\n      return mappedTypes;\n    }\n    /**\n     * Check if type is simplified struct format\n     *\n     * @method isSimplifiedStructFormat\n     * @param {string | Object} type\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSimplifiedStructFormat\",\n    value: function isSimplifiedStructFormat(type) {\n      return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n    }\n    /**\n     * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n     *\n     * @method mapStructNameAndType\n     * @param {string} structName\n     * @return {{type: string, name: *}}\n     */\n\n  }, {\n    key: \"mapStructNameAndType\",\n    value: function mapStructNameAndType(structName) {\n      var type = 'tuple';\n\n      if (structName.indexOf('[]') > -1) {\n        type = 'tuple[]';\n        structName = structName.slice(0, -2);\n      }\n\n      return {\n        type: type,\n        name: structName\n      };\n    }\n    /**\n     * Maps the simplified format in to the expected format of the ABICoder\n     *\n     * @method mapStructToCoderFormat\n     * @param {Object} struct\n     * @return {Array}\n     */\n\n  }, {\n    key: \"mapStructToCoderFormat\",\n    value: function mapStructToCoderFormat(struct) {\n      var self = this;\n      var components = [];\n      Object.keys(struct).forEach(function (key) {\n        if (typeof struct[key] === 'object') {\n          components.push(Object.assign(self.mapStructNameAndType(key), {\n            components: self.mapStructToCoderFormat(struct[key])\n          }));\n          return;\n        }\n\n        components.push({\n          name: key,\n          type: struct[key]\n        });\n      });\n      return components;\n    }\n    /**\n     * Encodes a function call from its json interface and parameters.\n     *\n     * @method encodeFunctionCall\n     * @param {Array} jsonInterface\n     * @param {Array} params\n     * @return {String} The encoded ABI for this function call\n     */\n\n  }, {\n    key: \"encodeFunctionCall\",\n    value: function encodeFunctionCall(jsonInterface, params) {\n      return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n    }\n    /**\n     * Should be used to decode bytes to plain param\n     *\n     * @method decodeParameter\n     * @param {String} type\n     * @param {String} bytes\n     * @return {Object} plain param\n     */\n\n  }, {\n    key: \"decodeParameter\",\n    value: function decodeParameter(type, bytes) {\n      return this.decodeParameters([type], bytes)[0];\n    }\n    /**\n     * Should be used to decode list of params\n     *\n     * @method decodeParameter\n     * @param {Array} outputs\n     * @param {String} bytes\n     * @return {Array} array of plain params\n     */\n\n  }, {\n    key: \"decodeParameters\",\n    value: function decodeParameters(outputs, bytes) {\n      if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n        throw new Error('Returned values aren\\'t valid, did it run Out of Gas?');\n      } // decode data\n\n\n      var abiCoder = new AbiCoder(); //\n\n      var res = abiCoder.decode(outputs, '0x' + bytes.replace(/0x/i, ''));\n      var returnValue = new Result();\n      returnValue.__length__ = 0;\n      outputs.forEach(function (output, i) {\n        if (utils.judge(output) === 'object' && output.type === 'address') {\n          returnValue[output.name || i] = '0x' + res[returnValue.__length__].slice(2); // returnValue[output.name || i] = utils.encodeAccount(res[returnValue.__length__].slice(2));\n        } else if (utils.judge(output) === 'object' && output.type === 'address[]') {\n          var decodedValue = res[returnValue.__length__];\n          var accounts = [];\n\n          for (var j = 0; j < decodedValue.length; j++) {\n            accounts.push('0x' + decodedValue[j].slice(2)); // accounts.push(utils.encodeAccount(decodedValue[j].slice(2)) );\n          }\n\n          returnValue[output.name || i] = accounts;\n        } else {\n          var _decodedValue = res[returnValue.__length__];\n          _decodedValue = _decodedValue === '0x' ? null : _decodedValue;\n          returnValue[i] = _decodedValue;\n\n          if (utils.judge(output) === 'object' && output.name) {\n            returnValue[output.name] = _decodedValue;\n          }\n        }\n\n        returnValue.__length__++;\n      });\n      return returnValue;\n    }\n    /**\n     * Decodes events non- and indexed parameters.\n     *\n     * @method decodeLog\n     * @param {Object} inputs\n     * @param {String} data\n     * @param {Array} topics\n     * @return {Array} array of plain params\n     */\n\n  }, {\n    key: \"decodeLog\",\n    value: function decodeLog(inputs, data, topics) {\n      var _this = this;\n\n      topics = utils.judge(topics) === 'array' ? topics : [topics];\n      data = data || '';\n      var notIndexedInputs = [];\n      var indexedParams = [];\n      var topicCount = 0; // TODO check for anonymous logs?\n\n      inputs.forEach(function (input, i) {\n        if (input.indexed) {\n          indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n            return input.type.indexOf(staticType) !== -1;\n          }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n          topicCount++;\n        } else {\n          notIndexedInputs[i] = input;\n        }\n      });\n      var nonIndexedData = data;\n      var notIndexedParams = nonIndexedData ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];\n      var returnValue = new Result();\n      returnValue.__length__ = 0;\n      inputs.forEach(function (res, i) {\n        returnValue[i] = res.type === 'string' ? '' : null;\n\n        if (typeof notIndexedParams[i] !== 'undefined') {\n          returnValue[i] = notIndexedParams[i];\n        }\n\n        if (typeof notIndexedParams[res.name] !== 'undefined') {\n          returnValue[i] = notIndexedParams[res.name];\n        }\n\n        if (typeof indexedParams[i] !== 'undefined') {\n          returnValue[i] = indexedParams[i];\n        }\n\n        if (res.name) {\n          returnValue[res.name] = returnValue[i];\n        }\n\n        returnValue.__length__++;\n      });\n      return returnValue;\n    }\n  }]);\n\n  return ABICoder;\n}();\n\nmodule.exports = new ABICoder();","map":null,"metadata":{},"sourceType":"script"}