{"ast":null,"code":"var AbiCoder = require('./abi-coder/index'); // console.log(\"Start\")\n// **************** tuple\n\n/**\n * Extraction size\n * @param {string} type \n * @returns {string}\n */\n\n\nfunction extractSize(type) {\n  var size = type.match(/([a-zA-Z0-9])(\\[.*\\])/);\n  return size ? size[2] : '';\n}\n/**\n * Perform complete tuple type definition\n * @param {*} typeDef \n * @returns \n */\n\n\nfunction makeFullTupleTypeDefinition(typeDef) {\n  if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n    var innerTypes = typeDef.components.map(function (innerType) {\n      return innerType.type;\n    });\n    return \"tuple(\".concat(innerTypes.join(','), \")\").concat(extractSize(typeDef.type));\n  }\n\n  return typeDef.type;\n} // **************** tuple\n\n/**\n * \n * @param {*} hex_data \n * @param {object} fnabi\n * @param {boolean} fnabi.constant\n * @param {{ name: string, type: string }[]} fnabi.inputs\n * @param {string} fnabi.name\n * @param {{ name: string, type: string }[]} fnabi.outputs\n * @param {boolean} fnabi.payable\n * @param {string} fnabi.stateMutability\n * @param {string} fnabi.type\n * @returns {{ name: string, type: string, value: string }[]}\n */\n\n\nfunction parseToArray(hex_data, fnabi) {\n  // console.log(hex_data)\n  // console.log(fnabi)\n  // If there are outputs\n  if (fnabi.outputs && fnabi.outputs.length > 0) {\n    try {\n      var i; // ABI output type\n\n      var outputTypes = [];\n\n      for (i = 0; i < fnabi.outputs.length; i++) {\n        // string\n        var type = fnabi.outputs[i].type;\n        outputTypes.push(type.indexOf('tuple') === 0 ? makeFullTupleTypeDefinition(fnabi.outputs[i]) : type); //helper\n      }\n\n      if (!hex_data.length) {\n        // Make sure that the data is filled with at least 0, because if there is no data, \"AbiCoder\" will throw an error\n        hex_data = new Uint8Array(32 * fnabi.outputs.length);\n      } // decode data\n\n\n      var abiCoder = new AbiCoder();\n      var decodedObj = abiCoder.decode(outputTypes, hex_data);\n      var output_ary = [];\n\n      for (i = 0; i < outputTypes.length; i++) {\n        // { name: '', type: 'string' }\n        var name = fnabi.outputs[i].name; // console.log(outputTypes[i], decodedObj[i])\n\n        if (outputTypes[i] === \"address\") {\n          var account = \"0x\" + decodedObj[i].substr(26).toUpperCase();\n          output_ary.push({\n            name: name || \"\",\n            type: outputTypes[i],\n            value: account\n          });\n        } else if (outputTypes[i] === \"address[]\") {\n          var accounts = [];\n\n          for (var j = 0; j < decodedObj[i].length; j++) {\n            accounts.push(\"0x\" + decodedObj[i].substr(26).toUpperCase());\n          }\n\n          output_ary.push({\n            name: name || \"\",\n            type: outputTypes[i],\n            value: accounts\n          });\n        } else {\n          output_ary.push({\n            name: name || \"\",\n            type: outputTypes[i],\n            value: decodedObj[i]\n          });\n        }\n      }\n\n      return output_ary;\n    } catch (e) {\n      return {\n        error: 'Failed to decode output: ' + e\n      };\n    }\n  }\n\n  return [];\n}\n\nfunction parseInputsToArray(hex_data, fnabi) {\n  if (fnabi.inputs && fnabi.inputs.length > 0) {\n    try {\n      var i; // ABI output type\n\n      var inputsTypes = [];\n\n      for (i = 0; i < fnabi.inputs.length; i++) {\n        // string\n        var type = fnabi.inputs[i].type;\n        inputsTypes.push(type.indexOf('tuple') === 0 ? makeFullTupleTypeDefinition(fnabi.inputs[i]) : type); //helper\n      }\n\n      if (!hex_data.length) {\n        // Make sure that the data is filled with at least 0, because if there is no data, \"AbiCoder\" will throw an error\n        hex_data = new Uint8Array(32 * fnabi.inputs.length);\n      } // decode data\n\n\n      var abiCoder = new AbiCoder();\n      var decodedObj = abiCoder.decode(inputsTypes, hex_data);\n      return decodedObj;\n    } catch (e) {\n      // console.log(\"err\");\n      return {\n        error: 'Failed to decode input: ' + e\n      };\n    }\n  }\n\n  return [];\n} // ABI started\n\n\nvar owner_abi = {\n  constant: true,\n  inputs: [],\n  name: \"owner\",\n  outputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n};\nvar name_abi = {\n  constant: true,\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    name: \"\",\n    type: \"string\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n};\nvar symbol_abi = {\n  constant: true,\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    name: \"\",\n    type: \"string\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n};\nvar decimals_abi = {\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n};\nvar balance_of_abi = {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n};\nvar total_supply_abi = {\n  constant: true,\n  inputs: [],\n  name: \"totalSupply\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n};\nvar allowance_abi = {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }, {\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"allowance\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}; // fn\n\nvar pageUtility = {\n  parse: function parse(data, abi) {\n    data = data.indexOf(\"0x\") === -1 ? \"0x\" + data : data;\n    return parseToArray(data, abi);\n  },\n  parseInputs: function parseInputs(data, abi) {\n    return parseInputsToArray(data, abi);\n  },\n  // owner\n  owner: function owner(data) {\n    return pageUtility.parse(data, owner_abi);\n  },\n  // name\n  name: function name(data) {\n    return pageUtility.parse(data, name_abi);\n  },\n  // symbol\n  symbol: function symbol(data) {\n    return pageUtility.parse(data, symbol_abi);\n  },\n  // precision\n  decimals: function decimals(data) {\n    return pageUtility.parse(data, decimals_abi);\n  },\n  // lump sum\n  totalSupply: function totalSupply(data) {\n    return pageUtility.parse(data, total_supply_abi);\n  },\n  // Check the number of tokens corresponding to account A\n  balanceOf: function balanceOf(data) {\n    return pageUtility.parse(data, balance_of_abi);\n  },\n  // View authorized transfers\n  allowance: function allowance(data) {\n    return pageUtility.parse(data, allowance_abi);\n  }\n};\nmodule.exports = {\n  parse: pageUtility.parse,\n  parseInputs: pageUtility.parseInputs,\n  name: pageUtility.name,\n  // name\n  symbol: pageUtility.symbol,\n  // symbol\n  owner: pageUtility.owner,\n  // owner\n  decimals: pageUtility.decimals,\n  // precision\n  totalSupply: pageUtility.totalSupply,\n  // Total supply\n  balanceOf: pageUtility.balanceOf,\n  allowance: pageUtility.allowance\n};","map":null,"metadata":{},"sourceType":"script"}