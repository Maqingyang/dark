{"ast":null,"code":"\"use strict\"; // let rpc     = require('node-json-rpc');\n// const options = {\n//     host: \"127.0.0.1\",\n//     port: 8765\n// };\n\nvar _regeneratorRuntime = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar rpc = require(\"./rpc-main\");\n\nvar HttpRequest = /*#__PURE__*/function () {\n  /**\n   * \n   * @param {*} host \n   * @param {*} timeout \n   * @param {*} apiVersion \n   */\n  function HttpRequest(host, timeout, apiVersion) {\n    _classCallCheck(this, HttpRequest);\n\n    var hostCon = Object.assign({}, host);\n    this.client = new rpc.Client(hostCon); // this.timeout = timeout || 0;\n    // this.apiVersion = apiVersion || \"v1\";\n  }\n  /**\n   * \n   * @param {*} opt \n   * @returns {Promise}\n   */\n\n\n  _createClass(HttpRequest, [{\n    key: \"asyncFunc\",\n    value: function asyncFunc(opt) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.client.call(opt, function (err, res) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(res);\n          }\n        });\n      });\n    } // HttpRequest.prototype. client = client;\n    // Account Start\n\n    /**\n     * Generate account \n     * enable_control Need to be set to true.\n     * @param {string} pwd - Generate account password\n     * @param {number} [gen_next_work] - (Optional) Whether to pre-generate the work value for the first transaction of the generated account, 0: no pre-generated, 1: pre-generated. The default is 1.\n     * @returns {Promise<{code, msg}>}\n     * */\n\n  }, {\n    key: \"accountCreate\",\n    value: function () {\n      var _accountCreate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pwd, gen_next_work) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (pwd) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - pwd\"\n                });\n\n              case 2:\n                if (gen_next_work !== 0) {\n                  gen_next_work = 1;\n                }\n\n                opt = {\n                  action: \"account_create\",\n                  password: pwd,\n                  gen_next_work: gen_next_work\n                };\n                _context.next = 6;\n                return this.asyncFunc(opt);\n\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function accountCreate(_x, _x2) {\n        return _accountCreate.apply(this, arguments);\n      }\n\n      return accountCreate;\n    }()\n    /**\n     * Delete the account.\n     * enable_control Need to be set to true.\n     * @param {string} account - Deleted account\n     * @param {string} pwd - password\n     * @returns {Promise<{code, msg}>}\n     * */\n\n  }, {\n    key: \"accountRemove\",\n    value: function () {\n      var _accountRemove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account, pwd) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (account) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                if (pwd) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - pwd\"\n                });\n\n              case 4:\n                opt = {\n                  action: \"account_remove\",\n                  account: account,\n                  password: pwd\n                };\n                _context2.next = 7;\n                return this.asyncFunc(opt);\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function accountRemove(_x3, _x4) {\n        return _accountRemove.apply(this, arguments);\n      }\n\n      return accountRemove;\n    }()\n    /**\n     * Unlock account \n     * enable_control Need to be set to true.\n     * @param {string} account - Unlocked account\n     * @param {string} pwd - password\n     * @returns {Promise<{code,msg}>} - `{\"code\": 0,\"msg\": \"OK\"}` for success\n     * */\n\n  }, {\n    key: \"accountUnlock\",\n    value: function () {\n      var _accountUnlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account, pwd) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (account) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                if (pwd) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - pwd\"\n                });\n\n              case 4:\n                opt = {\n                  action: \"account_unlock\",\n                  account: account,\n                  password: pwd\n                };\n                _context3.next = 7;\n                return this.asyncFunc(opt);\n\n              case 7:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function accountUnlock(_x5, _x6) {\n        return _accountUnlock.apply(this, arguments);\n      }\n\n      return accountUnlock;\n    }()\n    /**\n     * Lock the account.\n     * enable_control Need to be set to true.\n     * @param {string} account - Locked account\n     * @returns {Promise<{code, msg}>} - `{\"code\": 0,\"msg\": \"OK\"}` for success\n     * */\n\n  }, {\n    key: \"accountLock\",\n    value: function () {\n      var _accountLock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (account) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"account_lock\",\n                  account: account\n                };\n                _context4.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function accountLock(_x7) {\n        return _accountLock.apply(this, arguments);\n      }\n\n      return accountLock;\n    }()\n    /**\n     * Import account.\n     * enable_control Need to be set to true.\n     * @param {string} jsonFile - Import the json of the account\n     * @param {number} [gen_next_work] - (Optional) Whether to pre-generate the work value for the first transaction imported into the account, 0: no pre-generated, 1: pre-generated. The default is 1.\n     * @returns {Promise<{code, msg}>}\n     * */\n\n  }, {\n    key: \"accountImport\",\n    value: function () {\n      var _accountImport = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(jsonFile, gen_next_work) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (jsonFile) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - jsonFile\"\n                });\n\n              case 2:\n                if (gen_next_work !== 0) {\n                  gen_next_work = 1;\n                }\n\n                opt = {\n                  action: \"account_import\",\n                  json: jsonFile,\n                  gen_next_work: gen_next_work\n                };\n                _context5.next = 6;\n                return this.asyncFunc(opt);\n\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function accountImport(_x8, _x9) {\n        return _accountImport.apply(this, arguments);\n      }\n\n      return accountImport;\n    }()\n    /**\n     * Export account\n     * @param {string} account - Exported account\n     * @returns {Promise<{code, msg, json}>} - json: Export the json of the account\n     * */\n\n  }, {\n    key: \"accountExport\",\n    value: function () {\n      var _accountExport = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(account) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (account) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", 100);\n\n              case 2:\n                opt = {\n                  action: \"account_export\",\n                  account: account\n                };\n                _context6.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function accountExport(_x10) {\n        return _accountExport.apply(this, arguments);\n      }\n\n      return accountExport;\n    }()\n    /**\n     * Verify that the account format is legal\n     * @param {string} accountVal - Pending account\n     * @returns {Promise<{code, msg, valid}>} - valid：Validation results，0：Invalid format，1：Legal format\n     * */\n\n  }, {\n    key: \"accountValidate\",\n    value: function () {\n      var _accountValidate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(accountVal) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (accountVal) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", 0);\n\n              case 2:\n                opt = {\n                  action: \"account_validate\",\n                  account: accountVal\n                };\n                _context7.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function accountValidate(_x11) {\n        return _accountValidate.apply(this, arguments);\n      }\n\n      return accountValidate;\n    }()\n    /**\n     * Change Password.\n     * enable_control Need to be set to true.\n     * @param {string} account - Change password account\n     * @param {string} oldPwd - Original account password\n     * @param {string} newPwd - New account password\n     * @returns {Promise<{code, msg}>}\n     * */\n\n  }, {\n    key: \"accountChangePwd\",\n    value: function () {\n      var _accountChangePwd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(account, oldPwd, newPwd) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(!account || !oldPwd || !newPwd)) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param\"\n                });\n\n              case 2:\n                _context8.next = 4;\n                return this.asyncFunc({\n                  action: \"account_password_change\",\n                  account: account,\n                  old_password: oldPwd,\n                  new_password: newPwd\n                });\n\n              case 4:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function accountChangePwd(_x12, _x13, _x14) {\n        return _accountChangePwd.apply(this, arguments);\n      }\n\n      return accountChangePwd;\n    }()\n    /**\n     * Get all accounts of the current node.\n     * enable_control Need to be set to true.\n     * @returns {Promise<{code, msg, accounts}>} - accounts: {string[]} Account list\n     * */\n\n  }, {\n    key: \"accountList\",\n    value: function () {\n      var _accountList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                opt = {\n                  action: \"account_list\"\n                };\n                _context9.next = 3;\n                return this.asyncFunc(opt);\n\n              case 3:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function accountList() {\n        return _accountList.apply(this, arguments);\n      }\n\n      return accountList;\n    }()\n    /**\n     * Get transaction details of a specified account.\n     * enable_control Need to be set to true.\n     * @param {string} account - Specify query account\n     * @param {number} [limit] - Returns the upper limit of the transaction, if it exceeds the default 1000, the default is 1000\n     * @param {string} [index] - (Optional) The current query index, which comes from next_index in the returned result, and is empty by default\n     * @returns {Promise<{code, msg, blocks, next_index}>} - blocks: {Array.<Block>} Transaction details list, next_index: Query index\n     * */\n\n  }, {\n    key: \"accountBlockList\",\n    value: function () {\n      var _accountBlockList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(account, limit, index) {\n        var req;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (account) {\n                  _context10.next = 2;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                req = {\n                  action: \"account_block_list\",\n                  account: account\n                };\n\n                if (!limit || +limit > 1000) {\n                  req.limit = 1000;\n                } else {\n                  req.limit = limit;\n                }\n\n                if (index) {\n                  req.index = index;\n                }\n\n                _context10.next = 7;\n                return this.asyncFunc(req);\n\n              case 7:\n                return _context10.abrupt(\"return\", _context10.sent);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function accountBlockList(_x15, _x16, _x17) {\n        return _accountBlockList.apply(this, arguments);\n      }\n\n      return accountBlockList;\n    }() // Account End\n\n    /**\n     * Get the specified account balance\n     * @param {string} account - Designated account\n     * @returns {Promise<{code, msg, balance}>} - balance：{string} Account Balance\n     * */\n\n  }, {\n    key: \"accountBalance\",\n    value: function () {\n      var _accountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(account) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (account) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"account_balance\",\n                  account: account\n                };\n                _context11.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function accountBalance(_x18) {\n        return _accountBalance.apply(this, arguments);\n      }\n\n      return accountBalance;\n    }()\n    /**\n     * Get the balance of multiple accounts\n     * @param {string[]} accountAry - Multiple accounts specified\n     * @returns {Promise<{code, msg, balances}>} - balances {Object.<string, string>}\n     * */\n\n  }, {\n    key: \"accountsBalances\",\n    value: function () {\n      var _accountsBalances = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(accountAry) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(!accountAry || accountAry.length === 0)) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - accountAry\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"accounts_balances\",\n                  accounts: accountAry\n                };\n                _context12.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function accountsBalances(_x19) {\n        return _accountsBalances.apply(this, arguments);\n      }\n\n      return accountsBalances;\n    }()\n    /**\n     * Return the compiled smart contract code for the given address (if any)\n     * @param account\n     * @returns {Promise<{code: number, msg: string}>}\n     */\n\n  }, {\n    key: \"accountCode\",\n    value: function () {\n      var _accountCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(account) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (account) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                return _context13.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"account_code\",\n                  account: account\n                };\n                _context13.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function accountCode(_x20) {\n        return _accountCode.apply(this, arguments);\n      }\n\n      return accountCode;\n    }()\n  }, {\n    key: \"sendToBlock\",\n    value: function () {\n      var _sendToBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(transaction) {\n        var opt, res;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                console.log(transaction);\n                opt = {\n                  action: \"send_block\",\n                  from: transaction.from,\n                  to: \"\",\n                  amount: transaction.amount.toString(),\n                  password: transaction.password,\n                  gas: transaction.gas,\n                  gas_price: transaction.gas_price,\n                  data: transaction.data || \"\",\n                  gen_next_work: transaction.gen_next_work\n                };\n\n                if (transaction.to) {\n                  opt.to = transaction.to;\n                }\n\n                if (transaction.id) {\n                  opt.id = transaction.id;\n                }\n\n                if (transaction.previous) {\n                  opt.previous = transaction.previous;\n                } // console.log(\"opt\", opt);\n\n\n                _context14.next = 7;\n                return window.aleereum.send(opt);\n\n              case 7:\n                res = _context14.sent;\n                return _context14.abrupt(\"return\", res);\n\n              case 9:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      function sendToBlock(_x21) {\n        return _sendToBlock.apply(this, arguments);\n      }\n\n      return sendToBlock;\n    }()\n    /**\n     * Send the transaction. \n     * enable_control Need to be set to true.\n     * @param {object} transaction - Trading partners\n     * @returns {Promise<{code, msg, hash}>}\n     * */\n\n  }, {\n    key: \"sendBlock\",\n    value: function () {\n      var _sendBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(transaction) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(!transaction || !transaction.from || !transaction.password)) {\n                  _context15.next = 2;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - transaction \".concat(JSON.stringify(transaction))\n                });\n\n              case 2:\n                if (+transaction.amount >= 0 && +transaction.gas >= 0) {\n                  _context15.next = 4;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\", {\n                  code: 110,\n                  msg: \"transaction not valid - transaction \".concat(JSON.stringify(transaction))\n                });\n\n              case 4:\n                if (transaction.gen_next_work !== 0) {\n                  transaction.gen_next_work = 1;\n                }\n\n                opt = {\n                  action: \"send_block\",\n                  from: transaction.from,\n                  to: \"\",\n                  amount: transaction.amount.toString(),\n                  password: transaction.password,\n                  gas: transaction.gas,\n                  gas_price: transaction.gas_price,\n                  data: transaction.data || \"\",\n                  gen_next_work: transaction.gen_next_work\n                };\n\n                if (transaction.to) {\n                  opt.to = transaction.to;\n                }\n\n                if (transaction.id) {\n                  opt.id = transaction.id;\n                }\n\n                if (transaction.previous) {\n                  opt.previous = transaction.previous;\n                }\n\n                _context15.next = 11;\n                return this.asyncFunc(opt);\n\n              case 11:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 12:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function sendBlock(_x22) {\n        return _sendBlock.apply(this, arguments);\n      }\n\n      return sendBlock;\n    }()\n    /**\n     * Generate an unsigned transaction and return transaction details.\n     * enable_control Need to be set to true.\n     * @param {object} transaction - Trading partners\n     * @returns {Promise<{object}>}\n     * */\n\n  }, {\n    key: \"generateOfflineBlock\",\n    value: function () {\n      var _generateOfflineBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(transaction) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                if (!(!transaction || !transaction.from)) {\n                  _context16.next = 2;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - transaction \".concat(JSON.stringify(transaction))\n                });\n\n              case 2:\n                if (+transaction.amount >= 0 && +transaction.gas >= 0) {\n                  _context16.next = 4;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", {\n                  code: 110,\n                  msg: \"transaction not valid - transaction \".concat(JSON.stringify(transaction))\n                });\n\n              case 4:\n                opt = {\n                  action: \"generate_offline_block\",\n                  from: transaction.from,\n                  to: transaction.to || \"\",\n                  amount: transaction.amount,\n                  // 1CCN\n                  gas: transaction.gas,\n                  gas_price: transaction.gas_price,\n                  data: transaction.data || \"\"\n                };\n\n                if (transaction.previous) {\n                  opt.previous = transaction.previous;\n                }\n\n                _context16.next = 8;\n                return this.asyncFunc(opt);\n\n              case 8:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 9:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function generateOfflineBlock(_x23) {\n        return _generateOfflineBlock.apply(this, arguments);\n      }\n\n      return generateOfflineBlock;\n    }()\n    /**\n     * Send a signed transaction, the request parameter comes from the interface generate_offline_block, and the transaction hash is returned.\n     * enable_control Need to be set to true.\n     * @param {object} block - object returns from generate_offline_block\n     * @returns {Promise<{code, msg, hash}>} - hash: Transaction hash\n     * */\n\n  }, {\n    key: \"sendOfflineBlock\",\n    value: function () {\n      var _sendOfflineBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(block) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!(!block || !block.from)) {\n                  _context17.next = 2;\n                  break;\n                }\n\n                return _context17.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - block \".concat(JSON.stringify(block))\n                });\n\n              case 2:\n                if (+block.amount >= 0 && +block.gas >= 0) {\n                  _context17.next = 4;\n                  break;\n                }\n\n                return _context17.abrupt(\"return\", {\n                  code: 110,\n                  msg: \"block not valid - block \".concat(JSON.stringify(block))\n                });\n\n              case 4:\n                if (block.gen_next_work !== 0) {\n                  block.gen_next_work = 1;\n                }\n\n                opt = {\n                  action: \"send_offline_block\",\n                  hash: block.hash,\n                  from: block.from,\n                  to: block.to,\n                  amount: block.amount,\n                  gas: block.gas,\n                  gas_price: block.gas_price,\n                  data: block.data || \"\",\n                  previous: block.previous,\n                  exec_timestamp: block.exec_timestamp,\n                  work: block.work,\n                  signature: block.signature,\n                  id: block.id || \"\",\n                  gen_next_work: block.gen_next_work || \"\"\n                };\n\n                if (block.to) {\n                  opt.to = block.to;\n                }\n\n                if (block.id) {\n                  opt.id = block.id;\n                }\n\n                _context17.next = 10;\n                return this.asyncFunc(opt);\n\n              case 10:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 11:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function sendOfflineBlock(_x24) {\n        return _sendOfflineBlock.apply(this, arguments);\n      }\n\n      return sendOfflineBlock;\n    }()\n    /**\n     * Signed message\n     * @param {string} public_key - Signature public key\n     * @param {string} password - Public key password\n     * @param {string} msg - Signed message\n     * @returns {Promise<{code, msg, hash}>} - hash: Transaction hash\n     * */\n\n  }, {\n    key: \"signMsg\",\n    value: function () {\n      var _signMsg = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(public_key, password, msg) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(!public_key || !password || !msg)) {\n                  _context18.next = 2;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param\"\n                });\n\n              case 2:\n                _context18.next = 4;\n                return this.asyncFunc({\n                  action: \"sign_msg\",\n                  public_key: public_key,\n                  password: password,\n                  msg: msg\n                });\n\n              case 4:\n                return _context18.abrupt(\"return\", _context18.sent);\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function signMsg(_x25, _x26, _x27) {\n        return _signMsg.apply(this, arguments);\n      }\n\n      return signMsg;\n    }()\n    /**\n     * Send transaction： send()\n     * @param {object} sendObj \n     * @param {*} sendObj.from\n     * @param {*} sendObj.to\n     * @param {*} sendObj.amount\n     * @param {*} sendObj.password\n     * @param {*} sendObj.data\n     * @param {*} sendObj.id\n     * @param {*} sendObj.gas\n     * @param {*} sendObj.gas_price\n     * @returns {{block:string}}\n     */\n\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(sendObj) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                if (!(Object.keys(sendObj).length == 0)) {\n                  _context19.next = 2;\n                  break;\n                }\n\n                return _context19.abrupt(\"return\", 0);\n\n              case 2:\n                opt = {\n                  action: \"send\",\n                  from: sendObj.from,\n                  amount: sendObj.amount,\n                  gas: sendObj.gas,\n                  gas_price: sendObj.gas_price,\n                  password: sendObj.password,\n                  data: sendObj.data || \"\"\n                };\n\n                if (sendObj.to) {\n                  opt.to = sendObj.to;\n                }\n\n                if (sendObj.id) {\n                  opt.id = sendObj.id;\n                }\n\n                _context19.next = 7;\n                return this.asyncFunc(opt);\n\n              case 7:\n                return _context19.abrupt(\"return\", _context19.sent);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function send(_x28) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n    /**\n     * Get transaction details\n     * @param {string} blockHash - Transaction hash\n     * @returns {Promise<{code, msg, block}>} - block {object}\n     * */\n\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(blockHash) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                if (blockHash) {\n                  _context20.next = 2;\n                  break;\n                }\n\n                return _context20.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - blockHash\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"block\",\n                  hash: blockHash\n                };\n                _context20.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context20.abrupt(\"return\", _context20.sent);\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getBlock(_x29) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n    /**\n     * Get transaction details in bulk\n     * @param {string[]} blockHashAry - Transaction hash list\n     * @returns {Promise<{code, msg, blocks}>}  - blocks {object[]}\n     * */\n\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(blockHashAry) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                if (!(!blockHashAry || blockHashAry.length === 0)) {\n                  _context21.next = 2;\n                  break;\n                }\n\n                return _context21.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - blockHashAry\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"blocks\",\n                  hashes: blockHashAry\n                };\n                _context21.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context21.abrupt(\"return\", _context21.sent);\n\n              case 6:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getBlocks(_x30) {\n        return _getBlocks.apply(this, arguments);\n      }\n\n      return getBlocks;\n    }()\n    /**\n     * Get transaction status details\n     * @param blockHash\n     * @returns {Promise<{code: number, msg: string}>}\n     */\n\n  }, {\n    key: \"getBlockState\",\n    value: function () {\n      var _getBlockState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(blockHash) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                if (blockHash) {\n                  _context22.next = 2;\n                  break;\n                }\n\n                return _context22.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - blockHash\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"block_state\",\n                  hash: blockHash\n                };\n                _context22.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context22.abrupt(\"return\", _context22.sent);\n\n              case 6:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getBlockState(_x31) {\n        return _getBlockState.apply(this, arguments);\n      }\n\n      return getBlockState;\n    }()\n    /**\n     * Get transaction status in batches\n     * @param blockHashAry\n     * @returns {Promise<{code: number, msg: string}>}\n     */\n\n  }, {\n    key: \"getBlockStates\",\n    value: function () {\n      var _getBlockStates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(blockHashAry) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(!blockHashAry || blockHashAry.length === 0)) {\n                  _context23.next = 2;\n                  break;\n                }\n\n                return _context23.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - blockHashAry\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"block_states\",\n                  hashes: blockHashAry\n                };\n                _context23.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context23.abrupt(\"return\", _context23.sent);\n\n              case 6:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getBlockStates(_x32) {\n        return _getBlockStates.apply(this, arguments);\n      }\n\n      return getBlockStates;\n    }()\n    /**\n     * Get account list： blockList()\n     * @param {*} account \n     * @param {*} limit \n     * @param {*} index \n     * @returns {{next_index:number}} Stable transactions in the current account (not including forks)\n     */\n\n  }, {\n    key: \"blockList\",\n    value: function () {\n      var _blockList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(account, limit, index) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                if (account) {\n                  _context24.next = 2;\n                  break;\n                }\n\n                return _context24.abrupt(\"return\", 0);\n\n              case 2:\n                if (limit) {\n                  _context24.next = 4;\n                  break;\n                }\n\n                return _context24.abrupt(\"return\", 1);\n\n              case 4:\n                if (!index) {\n                  opt = {\n                    action: \"block_list\",\n                    account: account,\n                    limit: limit\n                  };\n                } else {\n                  opt = {\n                    action: \"block_list\",\n                    account: account,\n                    limit: limit,\n                    index: index\n                  };\n                } //next_index\n\n                /*\n                 * From - >\n                 * */\n\n\n                _context24.next = 7;\n                return this.asyncFunc(opt);\n\n              case 7:\n                return _context24.abrupt(\"return\", _context24.sent);\n\n              case 8:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function blockList(_x33, _x34, _x35) {\n        return _blockList.apply(this, arguments);\n      }\n\n      return blockList;\n    }() // The incoming mci value returns the information of all blocks under mci\n\n    /*\n    {\n        \"action\"    :\"mci_blocks\",\n        \"mci\"       :\"121\",\n        \"limit\"     :\"50\",\n        \"next_index\":'',    // Pass an empty string for the first time, and subsequent values will be taken from the previous result next_index\n    }\n    ->\n    {\n        blocks:[],\n        \"next_index\": \"XXX\" // \"\" or a string of strings, if next_index == \"\" the block request under this mci ends\n    };\n    */\n\n    /**\n     * @deprecated\n     * */\n\n  }, {\n    key: \"mciBlocks\",\n    value: function () {\n      var _mciBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(mci, limit, next_index) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if (limit) {\n                  _context25.next = 2;\n                  break;\n                }\n\n                return _context25.abrupt(\"return\", 1);\n\n              case 2:\n                if (next_index) {\n                  opt = {\n                    action: \"mci_blocks\",\n                    mci: mci,\n                    limit: limit,\n                    next_index: next_index\n                  };\n                } else {\n                  opt = {\n                    action: \"mci_blocks\",\n                    mci: mci,\n                    limit: limit\n                  };\n                }\n\n                _context25.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context25.abrupt(\"return\", _context25.sent);\n\n              case 6:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function mciBlocks(_x36, _x37, _x38) {\n        return _mciBlocks.apply(this, arguments);\n      }\n\n      return mciBlocks;\n    }()\n    /**\n     * Get multiple transactions under the stable specified mci.\n     * @param {number} limit - Returns the upper limit of the transaction, if it exceeds 1000, the default is 1000\n     * @param {string} [index] - (Optional) The current query index, which comes from next_index in the returned result, and is empty by default.\n     * @returns {Promise<{code, msg, blocks, next_index}>}\n     * */\n\n  }, {\n    key: \"stableBlocks\",\n    value: function () {\n      var _stableBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(limit, index) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                if (!limit || limit > 1000) {\n                  limit = 1000;\n                }\n\n                if (index === undefined) {\n                  opt = {\n                    action: \"stable_blocks\",\n                    limit: limit\n                  };\n                } else {\n                  opt = {\n                    action: \"stable_blocks\",\n                    limit: Number(limit),\n                    index: Number(index)\n                  };\n                }\n\n                _context26.next = 4;\n                return this.asyncFunc(opt);\n\n              case 4:\n                return _context26.abrupt(\"return\", _context26.sent);\n\n              case 5:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function stableBlocks(_x39, _x40) {\n        return _stableBlocks.apply(this, arguments);\n      }\n\n      return stableBlocks;\n    }() // Information of all currently unstable blocks\n\n    /*\n    {\n        \"action\"    :\"unstable_blocks\",\n        \"mci\"       :\"121\",\n        \"limit\"     :\"50\",\n        \"next_index\":'',    //  Pass an empty string for the first time, and the subsequent value will take the next_index from the previous result\n    }\n    ->\n    {\n        blocks:[],\n        \"next_index\": \"XXX\" // \"\" or a string of strings, if next_index == \"\" the block request under this mci ends\n    };\n    */\n\n    /**\n     * Returns the details of unstabilized transactions.\n     * @param {number} limit - Returns the upper limit of the transaction, if it exceeds 1000, the default is 1000.\n     * @param {string} [index] - (Optional) The current query index, which comes from next_index in the returned result, and is empty by default.\n     * @returns {Promise<{code, msg, blocks, next_index}>}\n     * */\n\n  }, {\n    key: \"unstableBlocks\",\n    value: function () {\n      var _unstableBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(limit, index) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (!limit || limit > 1000) {\n                  limit = 1000;\n                }\n\n                if (index === undefined) {\n                  opt = {\n                    action: \"unstable_blocks\",\n                    limit: limit\n                  };\n                } else {\n                  opt = {\n                    action: \"unstable_blocks\",\n                    limit: limit,\n                    index: index\n                  };\n                }\n\n                _context27.next = 4;\n                return this.asyncFunc(opt);\n\n              case 4:\n                return _context27.abrupt(\"return\", _context27.sent);\n\n              case 5:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function unstableBlocks(_x41, _x42) {\n        return _unstableBlocks.apply(this, arguments);\n      }\n\n      return unstableBlocks;\n    }() // Mci and block information of the last stable point\n\n    /*\n    return\n        {\n            last_stable_mci: 100,\n            last_mci:122\n        }\n    */\n\n    /**\n     * Get the maximum stable main chain index and maximum main chain index of the current node.\n     * @returns {Promise<{code, msg, last_stable_mci, last_mci}>}\n     * */\n\n  }, {\n    key: \"status\",\n    value: function () {\n      var _status = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                opt = {\n                  action: \"status\"\n                };\n                _context28.next = 3;\n                return this.asyncFunc(opt);\n\n              case 3:\n                return _context28.abrupt(\"return\", _context28.sent);\n\n              case 4:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function status() {\n        return _status.apply(this, arguments);\n      }\n\n      return status;\n    }()\n    /**\n     * Get the list of witnesses.\n     * @returns {Promise<{code, msg, witness_list}>}\n     * */\n\n  }, {\n    key: \"witnessList\",\n    value: function () {\n      var _witnessList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.asyncFunc({\n                  action: \"witness_list\"\n                });\n\n              case 2:\n                return _context29.abrupt(\"return\", _context29.sent);\n\n              case 3:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function witnessList() {\n        return _witnessList.apply(this, arguments);\n      }\n\n      return witnessList;\n    }()\n    /**\n     * Get the pre-generated work of the specified account.\n     * enable_control Need to be set to true.\n     * @param {string} account - Designated account\n     * @returns {Promise<{code, msg, root, work}>}\n     * */\n\n  }, {\n    key: \"getWork\",\n    value: function () {\n      var _getWork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(account) {\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                if (account) {\n                  _context30.next = 2;\n                  break;\n                }\n\n                return _context30.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - account\"\n                });\n\n              case 2:\n                _context30.next = 4;\n                return this.asyncFunc({\n                  action: \"work_get\",\n                  account: account\n                });\n\n              case 4:\n                return _context30.abrupt(\"return\", _context30.sent);\n\n              case 5:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function getWork(_x43) {\n        return _getWork.apply(this, arguments);\n      }\n\n      return getWork;\n    }()\n    /**\n     * Get the current node daemon version number, rpc version number, and database version number.\n     * @returns {Promise<{code, msg, version, rpc_version, store_version}>}\n     * */\n\n  }, {\n    key: \"version\",\n    value: function () {\n      var _version = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this.asyncFunc({\n                  action: \"version\"\n                });\n\n              case 2:\n                return _context31.abrupt(\"return\", _context31.sent);\n\n              case 3:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function version() {\n        return _version.apply(this, arguments);\n      }\n\n      return version;\n    }()\n    /**\n     * Stop program\n     * @returns {Promise<{code, msg}>}\n     * */\n\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                opt = {\n                  action: \"stop\"\n                };\n                _context32.next = 3;\n                return this.asyncFunc(opt);\n\n              case 3:\n                return _context32.abrupt(\"return\", _context32.sent);\n\n              case 4:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }() // **************************************************************** Contract related start\n\n    /**\n     * Get contract status\n     * @param {string} from - Source account\n     * @param {string} to - Target account\n     * @param {string} data - Contract code or data.\n     * @returns {Promise<{code, msg, output}>}\n     * Return success\n     * {\n        \"code\": 0,\n        \"msg\": \"OK\",\n        \"output\": \"692A70D2E424A56D2C6C27AA97D1A86395877B3A2C6C27AA97D1A86395877B5C\"\n      }\n      // Return failed\n      {\n        \"code\": 3,  //1,2,3,4,5\n        \"msg\": \"Invalid to account\"\n      }\n     * */\n\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(call_obj) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                opt = {\n                  action: \"call\",\n                  to: call_obj.to\n                };\n\n                if (call_obj.from) {\n                  opt.from = call_obj.from;\n                }\n\n                if (call_obj.data) {\n                  opt.data = call_obj.data;\n                }\n\n                if (call_obj.mci) {\n                  opt.mci = call_obj.mci;\n                }\n\n                _context33.next = 6;\n                return this.asyncFunc(opt);\n\n              case 6:\n                return _context33.abrupt(\"return\", _context33.sent);\n\n              case 7:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function call(_x44) {\n        return _call.apply(this, arguments);\n      }\n\n      return call;\n    }()\n    /**\n     * Estimate the amount of gas consumed by the transaction\n     * @param \\{\n            \"from\": \"mcp4qwoBUYAvxgoVq5FHsXCCCkLCVuJ1z4224ZUVZRGhyawuzbWyh\",// (Optional) Source account.\n            \"to\": \"mcp3gustGDwMtuUTn1iJHBwRYXCBNF51dRixXNeumWDwZLvH43J3d\",// (Optional) Target account.\n            \"amount\": \"1000000000000000000\", // (Optional) string, amount, unit: 10-18CCN.\n            \"password\": \"s4iH1t@hBFtymA\",// (Optional) Source account password.\n            \"gas\": 1000,                    // [Required] The upper limit of gas used to execute transactions.\n            \"gas_price\": \"1000000000000\",   // [Required] Gas price, unit: 10-18CCN/gas, handling fee = actual gas used * gas_price.\n            \"data\": \"496E204D617468205765205472757374\"// (Optional) Smart contract code or data. The default is empty.\n        }\n     * @param {object} req \n     * @param {*} req.from\n     * @param {*} req.to\n     * @param {*} req.amount\n     * @param {*} req.data\n     * @param {string} req.gas [Required]The upper limit of gas used to execute transactions.\n     * @param {string} req.gas_price [Required]Gas price, unit: 10-18CCN/gas, handling fee = gas actually used * gas_price.\n     * @param {*} req.mci\n     * @returns {Promise<{code, msg}>}\n     * */\n\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n        var req,\n            opt,\n            _args34 = arguments;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                req = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : {};\n                opt = {\n                  action: \"estimate_gas\"\n                };\n                req.from && (opt.from = req.from);\n                req.to && (opt.to = req.to);\n                req.amount && (opt.amount = req.amount);\n                req.gas && (opt.gas = req.gas);\n                req.gas_price && (opt.gas_price = req.gas_price);\n                req.data && (opt.data = req.data);\n                req.mci && (opt.mci = req.mci);\n                _context34.next = 11;\n                return this.asyncFunc(opt);\n\n              case 11:\n                return _context34.abrupt(\"return\", _context34.sent);\n\n              case 12:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function estimateGas() {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }()\n    /**\n     * Get insider transactions\n     * @param {*} hash \n     * @returns {Promise<{code, msg}>}\n     */\n\n  }, {\n    key: \"blockTraces\",\n    value: function () {\n      var _blockTraces = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(hash) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                if (hash) {\n                  _context35.next = 2;\n                  break;\n                }\n\n                return _context35.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - hash\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"block_traces\",\n                  hash: hash\n                };\n                _context35.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context35.abrupt(\"return\", _context35.sent);\n\n              case 6:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function blockTraces(_x45) {\n        return _blockTraces.apply(this, arguments);\n      }\n\n      return blockTraces;\n    }()\n    /**\n     * Get debug_trace_transaction information\n     * @param {*} hash \n     * @returns {Promise<{code, msg}>}\n     */\n\n  }, {\n    key: \"traceTransaction\",\n    value: function () {\n      var _traceTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(hash) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                if (hash) {\n                  _context36.next = 2;\n                  break;\n                }\n\n                return _context36.abrupt(\"return\", {\n                  code: 100,\n                  msg: \"no param - hash\"\n                });\n\n              case 2:\n                opt = {\n                  action: \"debug_trace_transaction\",\n                  hash: hash\n                };\n                _context36.next = 5;\n                return this.asyncFunc(opt);\n\n              case 5:\n                return _context36.abrupt(\"return\", _context36.sent);\n\n              case 6:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function traceTransaction(_x46) {\n        return _traceTransaction.apply(this, arguments);\n      }\n\n      return traceTransaction;\n    }()\n    /**\n     * \n     * @param {object} opts \n     * @param {*} opts.from_stable_block_index\n     * @param {*} opts.account\n     * @param {*} opts.topics\n     * @param {*} opts.to_stable_block_index\n     * @returns {Promise<{code, msg}>}\n     */\n\n  }, {\n    key: \"logs\",\n    value: function () {\n      var _logs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(opts) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                opt = {\n                  action: \"logs\",\n                  from_stable_block_index: opts.from_stable_block_index || 0,\n                  account: opts.account || \"\",\n                  topics: opts.topics || \"\"\n                };\n\n                if (opts.to_stable_block_index) {\n                  opt.to_stable_block_index = opts.to_stable_block_index;\n                }\n\n                _context37.next = 4;\n                return this.asyncFunc(opt);\n\n              case 4:\n                return _context37.abrupt(\"return\", _context37.sent);\n\n              case 5:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function logs(_x47) {\n        return _logs.apply(this, arguments);\n      }\n\n      return logs;\n    }()\n    /**\n     * \n     * @param {object} opts \n     * @param {*} opts.hash\n     * @param {*} opts.account\n     * @param {*} opts.begin\n     * @param {*} opts.max_results\n     * @returns {Promise<{code, msg}>}\n     */\n\n  }, {\n    key: \"debugStorageRangeAt\",\n    value: function () {\n      var _debugStorageRangeAt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(opts) {\n        var opt;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                opt = {\n                  action: \"debug_storage_range_at\",\n                  hash: opts.hash,\n                  account: opts.account,\n                  begin: opts.begin\n                };\n\n                if (opts.max_results) {\n                  opt.max_results = opts.max_results;\n                }\n\n                _context38.next = 4;\n                return this.asyncFunc(opt);\n\n              case 4:\n                return _context38.abrupt(\"return\", _context38.sent);\n\n              case 5:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function debugStorageRangeAt(_x48) {\n        return _debugStorageRangeAt.apply(this, arguments);\n      }\n\n      return debugStorageRangeAt;\n    }() // **************************************************************** Contract related end\n\n  }]);\n\n  return HttpRequest;\n}();\n\nmodule.exports = HttpRequest;","map":null,"metadata":{},"sourceType":"script"}