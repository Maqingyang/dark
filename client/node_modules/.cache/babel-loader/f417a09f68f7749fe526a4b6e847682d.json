{"ast":null,"code":"var _objectSpread = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _toConsumableArray = require(\"/Users/asurashen/Project/ale_try/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.argon2 = factory();\n  }\n})(typeof self !== 'undefined' ? self : this, function () {\n  var global = typeof self !== 'undefined' ? self : this;\n  /**\n   * @enum\n   */\n\n  var ArgonType = {\n    argon2d: 0,\n    argon2i: 1,\n    argon2id: 2\n  }; // 加载Module\n\n  function loadModule(mem) {\n    if (loadModule._promise) {\n      return loadModule._promise;\n    }\n\n    if (loadModule._module) {\n      return Promise.resolve(loadModule._module);\n    }\n\n    var promise = loadWasmModule().then(function (Module) {\n      return new Promise(function (resolve) {\n        Module.postRun.push(function () {\n          return resolve(Module);\n        });\n      });\n    });\n    loadModule._promise = promise;\n    return promise.then(function (Module) {\n      loadModule._module = Module;\n      delete loadModule._promise;\n      return Module;\n    });\n  }\n\n  function loadWasmModule() {\n    if (global.loadArgon2WasmModule) {\n      return global.loadArgon2WasmModule();\n    }\n\n    return Promise.resolve(require('./dist/argon2.js'));\n  } //分配数组\n\n\n  function allocateArray(Module, strOrArr) {\n    var arr = strOrArr instanceof Uint8Array || strOrArr instanceof Array ? strOrArr : encodeUtf8(strOrArr);\n    var nullTerminatedArray = new Uint8Array([].concat(_toConsumableArray(arr), [0]));\n    return Module.allocate(nullTerminatedArray, 'i8', Module.ALLOC_NORMAL);\n  }\n\n  function encodeUtf8(str) {\n    if (typeof TextEncoder === 'function') {\n      return new TextEncoder().encode(str);\n    } else if (typeof Buffer === 'function') {\n      return Buffer.from(str);\n    } else {\n      throw new Error(\"Don't know how to decode UTF8\");\n    }\n  }\n  /**\n   * Argon2 hash\n   * @param {string|Uint8Array} params.pass - password string\n   * @param {string|Uint8Array} params.salt - salt string\n   * @param {number} [params.time=1] - the number of iterations\n   * @param {number} [params.mem=1024] - used memory, in KiB\n   * @param {number} [params.hashLen=24] - desired hash length\n   * @param {number} [params.parallelism=1] - desired parallelism\n   * @param {number} [params.type=argon2.argon2d] - hash type:\n   *      argon2.argon2d\n   *      argon2.argon2i\n   *      argon2.argon2id\n   *\n   * @return Promise\n   *\n   * @example\n   *  argon2.hash({ pass: 'password', salt: 'somesalt' })\n   *      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n   *      .catch(e => console.error(e.message, e.code))\n   */\n\n\n  function argon2Hash(params) {\n    var mCost = params.mem || 1024;\n    return loadModule(mCost).then(function (Module) {\n      var tCost = params.time || 1;\n      var parallelism = params.parallelism || 1;\n      var pwd = allocateArray(Module, params.pass);\n      var pwdlen = params.pass.length;\n      var salt = allocateArray(Module, params.salt);\n      var saltlen = params.salt.length;\n      var hash = Module.allocate(new Array(params.hashLen || 24), 'i8', Module.ALLOC_NORMAL);\n      var hashlen = params.hashLen || 24;\n      var encoded = Module.allocate(new Array(512), 'i8', Module.ALLOC_NORMAL);\n      var encodedlen = 512;\n      var argon2Type = params.type || ArgonType.argon2d;\n      var version = 0x13;\n      var err;\n      var res;\n\n      try {\n        res = Module._argon2_hash(tCost, mCost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen, encoded, encodedlen, argon2Type, version);\n      } catch (e) {\n        err = e;\n      }\n\n      var result;\n\n      if (res === 0 && !err) {\n        var hashStr = '';\n        var hashArr = new Uint8Array(hashlen);\n\n        for (var i = 0; i < hashlen; i++) {\n          var byte = Module.HEAP8[hash + i];\n          hashArr[i] = byte;\n          hashStr += ('0' + (0xff & byte).toString(16)).slice(-2);\n        }\n\n        var encodedStr = Module.UTF8ToString(encoded);\n        result = {\n          hash: hashArr,\n          hashHex: hashStr,\n          encoded: encodedStr\n        };\n      } else {\n        try {\n          if (!err) {\n            err = Module.UTF8ToString(Module._argon2_error_message(res));\n          }\n        } catch (e) {}\n\n        result = {\n          message: err,\n          code: res\n        };\n      }\n\n      try {\n        Module._free(pwd);\n\n        Module._free(salt);\n\n        Module._free(hash);\n\n        Module._free(encoded);\n      } catch (e) {}\n\n      if (err) {\n        throw result;\n      } else {\n        return result;\n      }\n    });\n  }\n  /**\n   * Argon2 verify function\n   * @param {string} params.pass - password string\n   * @param {string|Uint8Array} params.encoded - encoded hash\n   * @param {number} [params.type=argon2.argon2d] - hash type:\n   *      argon2.argon2d\n   *      argon2.argon2i\n   *      argon2.argon2id\n   *\n   * @returns Promise\n   *\n   * @example\n   *  argon2.verify({ pass: 'password', encoded: 'encoded-hash' })\n   *      .then(() => console.log('OK'))\n   *      .catch(e => console.error(e.message, e.code))\n   */\n\n\n  function argon2Verify(params) {\n    return loadModule().then(function (Module) {\n      var pwd = allocateArray(Module, params.pass);\n      var pwdlen = params.pass.length;\n      var enc = allocateArray(Module, params.encoded);\n      var argon2Type = params.type;\n\n      if (argon2Type === undefined) {\n        var typeStr = params.encoded.split('$')[1];\n\n        if (typeStr) {\n          typeStr = typeStr.replace('a', 'A');\n          argon2Type = ArgonType[typeStr] || ArgonType.argon2d;\n        }\n      }\n\n      var err;\n      var res;\n\n      try {\n        res = Module._argon2_verify(enc, pwd, pwdlen, argon2Type);\n      } catch (e) {\n        err = e;\n      }\n\n      var result;\n\n      if (res || err) {\n        try {\n          if (!err) {\n            err = Module.UTF8ToString(Module._argon2_error_message(res));\n          }\n        } catch (e) {}\n\n        result = {\n          message: err,\n          code: res\n        };\n      }\n\n      try {\n        Module._free(pwd);\n\n        Module._free(enc);\n      } catch (e) {}\n\n      if (err) {\n        throw result;\n      } else {\n        return result;\n      }\n    });\n  }\n\n  return _objectSpread({}, ArgonType, {\n    hash: argon2Hash,\n    verify: argon2Verify\n  });\n});","map":null,"metadata":{},"sourceType":"script"}