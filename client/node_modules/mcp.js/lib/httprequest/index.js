"use strict";const rpc=require("./rpc-main");class HttpRequest{constructor(t,a,n){const c=Object.assign({},t);this.client=new rpc.Client(c)}asyncFunc(t){return new Promise((n,c)=>{this.client.call(t,function(t,a){if(t){c(t)}else{n(a)}})})}async accountCreate(t,a){if(!t){return{code:100,msg:"no param - pwd"}}if(a!==0){a=1}const n={action:"account_create",password:t,gen_next_work:a};return await this.asyncFunc(n)}async accountRemove(t,a){if(!t){return{code:100,msg:"no param - account"}}if(!a){return{code:100,msg:"no param - pwd"}}const n={action:"account_remove",account:t,password:a};return await this.asyncFunc(n)}async accountUnlock(t,a){if(!t){return{code:100,msg:"no param - account"}}if(!a){return{code:100,msg:"no param - pwd"}}const n={action:"account_unlock",account:t,password:a};return await this.asyncFunc(n)}async accountLock(t){if(!t){return{code:100,msg:"no param - account"}}const a={action:"account_lock",account:t};return await this.asyncFunc(a)}async accountImport(t,a){if(!t){return{code:100,msg:"no param - jsonFile"}}if(a!==0){a=1}const n={action:"account_import",json:t,gen_next_work:a};return await this.asyncFunc(n)}async accountExport(t){if(!t){return 100}const a={action:"account_export",account:t};return await this.asyncFunc(a)}async accountValidate(t){if(!t){return 0}const a={action:"account_validate",account:t};return await this.asyncFunc(a)}async accountChangePwd(t,a,n){if(!t||!a||!n){return{code:100,msg:"no param"}}return await this.asyncFunc({action:"account_password_change",account:t,old_password:a,new_password:n})}async accountList(){const t={action:"account_list"};return await this.asyncFunc(t)}async accountBlockList(t,a,n){if(!t){return{code:100,msg:"no param - account"}}const c={action:"account_block_list",account:t};if(!a||+a>1e3){c.limit=1e3}else{c.limit=a}if(n){c.index=n}return await this.asyncFunc(c)}async accountBalance(t){if(!t){return{code:100,msg:"no param - account"}}const a={action:"account_balance",account:t};return await this.asyncFunc(a)}async accountsBalances(t){if(!t||t.length===0){return{code:100,msg:"no param - accountAry"}}const a={action:"accounts_balances",accounts:t};return await this.asyncFunc(a)}async accountCode(t){if(!t){return{code:100,msg:"no param - account"}}const a={action:"account_code",account:t};return await this.asyncFunc(a)}async sendToBlock(t){console.log(t);const a={action:"send_block",from:t.from,to:"",amount:t.amount.toString(),password:t.password,gas:t.gas,gas_price:t.gas_price,data:t.data||"",gen_next_work:t.gen_next_work};if(t.to){a.to=t.to}if(t.id){a.id=t.id}if(t.previous){a.previous=t.previous}const n=await window.aleereum.send(a);return n}async sendBlock(t){if(!t||!t.from||!t.password){return{code:100,msg:`no param - transaction ${JSON.stringify(t)}`}}if(!(+t.amount>=0&&+t.gas>=0)){return{code:110,msg:`transaction not valid - transaction ${JSON.stringify(t)}`}}if(t.gen_next_work!==0){t.gen_next_work=1}const a={action:"send_block",from:t.from,to:"",amount:t.amount.toString(),password:t.password,gas:t.gas,gas_price:t.gas_price,data:t.data||"",gen_next_work:t.gen_next_work};if(t.to){a.to=t.to}if(t.id){a.id=t.id}if(t.previous){a.previous=t.previous}return await this.asyncFunc(a)}async generateOfflineBlock(t){if(!t||!t.from){return{code:100,msg:`no param - transaction ${JSON.stringify(t)}`}}if(!(+t.amount>=0&&+t.gas>=0)){return{code:110,msg:`transaction not valid - transaction ${JSON.stringify(t)}`}}const a={action:"generate_offline_block",from:t.from,to:t.to||"",amount:t.amount,gas:t.gas,gas_price:t.gas_price,data:t.data||""};if(t.previous){a.previous=t.previous}return await this.asyncFunc(a)}async sendOfflineBlock(t){if(!t||!t.from){return{code:100,msg:`no param - block ${JSON.stringify(t)}`}}if(!(+t.amount>=0&&+t.gas>=0)){return{code:110,msg:`block not valid - block ${JSON.stringify(t)}`}}if(t.gen_next_work!==0){t.gen_next_work=1}const a={action:"send_offline_block",hash:t.hash,from:t.from,to:t.to,amount:t.amount,gas:t.gas,gas_price:t.gas_price,data:t.data||"",previous:t.previous,exec_timestamp:t.exec_timestamp,work:t.work,signature:t.signature,id:t.id||"",gen_next_work:t.gen_next_work||""};if(t.to){a.to=t.to}if(t.id){a.id=t.id}return await this.asyncFunc(a)}async signMsg(t,a,n){if(!t||!a||!n){return{code:100,msg:"no param"}}return await this.asyncFunc({action:"sign_msg",public_key:t,password:a,msg:n})}async send(t){if(Object.keys(t).length==0){return 0}const a={action:"send",from:t.from,amount:t.amount,gas:t.gas,gas_price:t.gas_price,password:t.password,data:t.data||""};if(t.to){a.to=t.to}if(t.id){a.id=t.id}return await this.asyncFunc(a)}async getBlock(t){if(!t){return{code:100,msg:"no param - blockHash"}}const a={action:"block",hash:t};return await this.asyncFunc(a)}async getBlocks(t){if(!t||t.length===0){return{code:100,msg:"no param - blockHashAry"}}const a={action:"blocks",hashes:t};return await this.asyncFunc(a)}async getBlockState(t){if(!t){return{code:100,msg:"no param - blockHash"}}const a={action:"block_state",hash:t};return await this.asyncFunc(a)}async getBlockStates(t){if(!t||t.length===0){return{code:100,msg:"no param - blockHashAry"}}const a={action:"block_states",hashes:t};return await this.asyncFunc(a)}async blockList(t,a,n){let c;if(!t){return 0}if(!a){return 1}if(!n){c={action:"block_list",account:t,limit:a}}else{c={action:"block_list",account:t,limit:a,index:n}}return await this.asyncFunc(c)}async mciBlocks(t,a,n){if(!a){return 1}let c;if(n){c={action:"mci_blocks",mci:t,limit:a,next_index:n}}else{c={action:"mci_blocks",mci:t,limit:a}}return await this.asyncFunc(c)}async stableBlocks(t,a){if(!t||t>1e3){t=1e3}let n;if(a===undefined){n={action:"stable_blocks",limit:t}}else{n={action:"stable_blocks",limit:Number(t),index:Number(a)}}return await this.asyncFunc(n)}async unstableBlocks(t,a){if(!t||t>1e3){t=1e3}let n;if(a===undefined){n={action:"unstable_blocks",limit:t}}else{n={action:"unstable_blocks",limit:t,index:a}}return await this.asyncFunc(n)}async status(){const t={action:"status"};return await this.asyncFunc(t)}async witnessList(){return await this.asyncFunc({action:"witness_list"})}async getWork(t){if(!t){return{code:100,msg:"no param - account"}}return await this.asyncFunc({action:"work_get",account:t})}async version(){return await this.asyncFunc({action:"version"})}async stop(){const t={action:"stop"};return await this.asyncFunc(t)}async call(t){const a={action:"call",to:t.to};if(t.from){a.from=t.from}if(t.data){a.data=t.data}if(t.mci){a.mci=t.mci}return await this.asyncFunc(a)}async estimateGas(t={}){const a={action:"estimate_gas"};t.from&&(a.from=t.from);t.to&&(a.to=t.to);t.amount&&(a.amount=t.amount);t.gas&&(a.gas=t.gas);t.gas_price&&(a.gas_price=t.gas_price);t.data&&(a.data=t.data);t.mci&&(a.mci=t.mci);return await this.asyncFunc(a)}async blockTraces(t){if(!t){return{code:100,msg:"no param - hash"}}const a={action:"block_traces",hash:t};return await this.asyncFunc(a)}async traceTransaction(t){if(!t){return{code:100,msg:"no param - hash"}}const a={action:"debug_trace_transaction",hash:t};return await this.asyncFunc(a)}async logs(t){const a={action:"logs",from_stable_block_index:t.from_stable_block_index||0,account:t.account||"",topics:t.topics||""};if(t.to_stable_block_index){a.to_stable_block_index=t.to_stable_block_index}return await this.asyncFunc(a)}async debugStorageRangeAt(t){const a={action:"debug_storage_range_at",hash:t.hash,account:t.account,begin:t.begin};if(t.max_results){a.max_results=t.max_results}return await this.asyncFunc(a)}}module.exports=HttpRequest;